{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import os\n",
    "from joblib import dump, load, Parallel, delayed\n",
    "\n",
    "from spsd_utils import distance_matrix, exponent_kernel\n",
    "from lapl_utils import produce_laplacian_datasets, produce_normlaplacian_datasets\n",
    "from system_utils import computation_time, send_message\n",
    "from loader_utils import load_data_oftypes\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import roc_auc_score, accuracy_score\n",
    "from sklearn.cross_validation import train_test_split\n",
    "\n",
    "from scipy.linalg import svd, eigh, eigvalsh, eigvals\n",
    "\n",
    "from IPython.display import clear_output\n",
    "\n",
    "import matplotlib\n",
    "matplotlib.use(\"Pdf\")\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "matplotlib.rcParams['savefig.dpi'] = 200\n",
    "\n",
    "colors = ['#0000ff', '#00ff00', '#ff0000', '#ffff00']\n",
    "markers = ['o'] * 4 + ['x'] * 4\n",
    "\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Define functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class EigenValuesTransformer:\n",
    "\n",
    "    def __init__(self, k=0):\n",
    "        self.k = k\n",
    "\n",
    "    def _transform(self, cov):\n",
    "        U, S, V = svd(cov)\n",
    "        for k in range(self.k):\n",
    "            S[-k] = 0.\n",
    "        return np.dot(np.dot(U, np.diag(S)), V)\n",
    "\n",
    "    def fit(self, X, y=None):\n",
    "        # doesn't do anything\n",
    "        pass\n",
    "\n",
    "    def fit_transform(self, X, y=None):\n",
    "        return self.transform(X)\n",
    "\n",
    "    def transform(self, X):\n",
    "#         X = np.array(X)\n",
    "        return np.array([self._transform(cov) for cov in X])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def precompute_distances(data, metric='spsd', output_name=None, \n",
    "                         rank_decrease=None, return_res=True):\n",
    "    if not os.path.exists('dump/distances'):\n",
    "        os.mkdir('dump/distances')\n",
    "    \n",
    "    if output_name is not None:\n",
    "        if os.path.exists('dump/distances/%s' % output_name):\n",
    "            return load('dump/distances/%s' % output_name)\n",
    "        \n",
    "    distances = {}\n",
    "    if rank_decrease is not None:\n",
    "        data = EigenValuesTransformer(k=rank_decrease).transform(data)\n",
    "\n",
    "    distances = distance_matrix(data, metric)\n",
    "\n",
    "    if output_name is not None:\n",
    "        dump(distances, 'dump/distances/%s' % output_name)\n",
    "    if return_res:\n",
    "        return distances"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dtypes = ('AD', 'Normal', 'EMCI', 'LMCI')\n",
    "orig_matrices, inv_matrices, target, idx, diagnosis, names = load_data_oftypes(('AD', 'Normal'))\n",
    "data_raw = produce_laplacian_datasets(orig_matrices, inv_matrices)\n",
    "data = data_raw['original_nonnormed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "orig_matrices, inv_matrices, target, idx, diagnosis, names = load_data_oftypes(dtypes)\n",
    "data_raw = produce_laplacian_datasets(orig_matrices, inv_matrices)\n",
    "data = data_raw['original_nonnormed']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 Precompute distances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Parallel(n_jobs=-1)(delayed(precompute_distances)(data, output_name='original_nonnormed_drop_%d' % k, rank_decrease=k, return_res=False) for k in np.arange(1,15))\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Look how distance matrix changes while lowering rank"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# @computation_time\n",
    "def distance_matrix_diff(data, rank_decrease_list, save=True, show=False, output_name=None):\n",
    "    diff_matrix = {rank_decrease: None for rank_decrease in rank_decrease_list}\n",
    "    max_diffs = []\n",
    "    \n",
    "    no_drop = precompute_distances(data, output_name=output_name)\n",
    "    send_message('Precomputed original distance matrix for %s' % output_name)\n",
    "    \n",
    "    for rank_decrease in rank_decrease_list:\n",
    "        drop = precompute_distances(data, rank_decrease=rank_decrease, \n",
    "                                    output_name='%s_drop_%d' % (output_name, rank_decrease) if output_name is not None else None)\n",
    "        \n",
    "        send_message('Precomputed distance matrix for %s with %d drop' % (output_name, rank_decrease))\n",
    "        \n",
    "        diff_matrix[rank_decrease] = np.array([[np.abs(no_drop[i,j] - drop[i,j]) \n",
    "                                                for i in range(drop.shape[0])] \n",
    "                                                for j in range(drop.shape[1])]) / np.max([np.abs(no_drop),\n",
    "                                                                                             np.abs(drop)])\n",
    "        max_diffs.append(np.max(diff_matrix[rank_decrease]))\n",
    "        \n",
    "    max_diff = np.max(max_diffs)\n",
    "    for rank_decrease in rank_decrease_list:\n",
    "        if save:\n",
    "            if not os.path.exists('dump/plots'):\n",
    "                os.mkdir('dump/plots')\n",
    "            fig = plt.Figure()\n",
    "            sns.heatmap(diff_matrix[rank_decrease], vmax=max_diff, xticklabels=False, yticklabels=False,\n",
    "                                   cmap='RdBu_r')\n",
    "            plt.savefig('dump/plots/diff_drop_%d.png' % rank_decrease)\n",
    "            plt.close()\n",
    "        if show:\n",
    "            fig = plt.Figure()\n",
    "            sns.heatmap(diff_matrix[rank_decrease], vmax=max_diff, xticklabels=False, yticklabels=False,\n",
    "                                   cmap='RdBu_r')\n",
    "            plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    distance_matrix_diff(data, np.arange(2, 14, 2), output_name='original_nonnormed')\n",
    "    send_message('Done!')\n",
    "except Exception as e:\n",
    "    send_message('Something went wrong!\\n\\n%s' % e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ffmpeg version 3.3.1 Copyright (c) 2000-2017 the FFmpeg developers\n",
      "  built with gcc 4.8 (Ubuntu 4.8.4-2ubuntu1~14.04.3)\n",
      "  configuration: --extra-libs=-ldl --prefix=/opt/ffmpeg --mandir=/usr/share/man --enable-avresample --disable-debug --enable-nonfree --enable-gpl --enable-version3 --enable-libopencore-amrnb --enable-libopencore-amrwb --disable-decoder=amrnb --disable-decoder=amrwb --enable-libpulse --enable-libfreetype --enable-gnutls --enable-libx264 --enable-libx265 --enable-libfdk-aac --enable-libvorbis --enable-libmp3lame --enable-libopus --enable-libvpx --enable-libspeex --enable-libass --enable-avisynth --enable-libsoxr --enable-libxvid --enable-libvidstab --enable-libwavpack --enable-nvenc\n",
      "  libavutil      55. 58.100 / 55. 58.100\n",
      "  libavcodec     57. 89.100 / 57. 89.100\n",
      "  libavformat    57. 71.100 / 57. 71.100\n",
      "  libavdevice    57.  6.100 / 57.  6.100\n",
      "  libavfilter     6. 82.100 /  6. 82.100\n",
      "  libavresample   3.  5.  0 /  3.  5.  0\n",
      "  libswscale      4.  6.100 /  4.  6.100\n",
      "  libswresample   2.  7.100 /  2.  7.100\n",
      "  libpostproc    54.  5.100 / 54.  5.100\n",
      "Input #0, image2, from 'dump/plots/diff_drop_*.png':\n",
      "  Duration: 00:00:00.24, start: 0.000000, bitrate: N/A\n",
      "    Stream #0:0: Video: png, rgba(pc), 1200x800 [SAR 7874:7874 DAR 3:2], 25 fps, 25 tbr, 25 tbn, 25 tbc\n",
      "Stream mapping:\n",
      "  Stream #0:0 -> #0:0 (png (native) -> gif (native))\n",
      "Press [q] to stop, [?] for help\n",
      "Output #0, gif, to 'distance_matrix_break_2.gif':\n",
      "  Metadata:\n",
      "    encoder         : Lavf57.71.100\n",
      "    Stream #0:0: Video: gif, bgr8, 1200x800 [SAR 1:1 DAR 3:2], q=2-31, 200 kb/s, 2 fps, 100 tbn, 2 tbc\n",
      "    Metadata:\n",
      "      encoder         : Lavc57.89.100 gif\n",
      "frame=    6 fps=0.0 q=-0.0 Lsize=    1364kB time=00:00:02.51 bitrate=4451.2kbits/s speed=9.74x    \n",
      "video:1363kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.060829%\n"
     ]
    }
   ],
   "source": [
    "!ffmpeg -start_number 2 -r 2 -pattern_type glob -i 'dump/plots/diff_drop_*.png'  distance_matrix_break_2.gif\n",
    "# !ffmpeg -i distance_matrix_break.mp4 -r 2 -pix_fmt rgb24 -s qcif distance_matrix_break.gif"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
